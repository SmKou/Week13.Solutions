// <auto-generated />
using System;
using MessageBoardApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MessageBoard.Migrations
{
    [DbContext(typeof(MessageContext))]
    [Migration("20230816035914_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MessageBoardApi.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            Name = "Testing 1.2.3"
                        },
                        new
                        {
                            GroupId = 2,
                            Name = "Starters"
                        },
                        new
                        {
                            GroupId = 3,
                            Name = "Builders"
                        },
                        new
                        {
                            GroupId = 4,
                            Name = "FAQ"
                        });
                });

            modelBuilder.Entity("MessageBoardApi.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            GroupId = 1,
                            MessageText = "Test tomorrow guys, gear up!!",
                            SentAt = new DateTime(2023, 8, 14, 20, 59, 14, 584, DateTimeKind.Local).AddTicks(2353),
                            UserId = 2
                        },
                        new
                        {
                            MessageId = 2,
                            GroupId = 3,
                            MessageText = "DIY wood-cardboard shelves complete.",
                            SentAt = new DateTime(2023, 8, 14, 20, 59, 14, 584, DateTimeKind.Local).AddTicks(2410),
                            UserId = 1
                        },
                        new
                        {
                            MessageId = 3,
                            GroupId = 3,
                            MessageText = "Awesome. How did the shelves turn out?",
                            SentAt = new DateTime(2023, 8, 14, 20, 59, 14, 584, DateTimeKind.Local).AddTicks(2412),
                            UserId = 2
                        },
                        new
                        {
                            MessageId = 4,
                            GroupId = 1,
                            MessageText = "Why do we have so many tests!!",
                            SentAt = new DateTime(2023, 8, 15, 20, 59, 14, 584, DateTimeKind.Local).AddTicks(2415),
                            UserId = 1
                        },
                        new
                        {
                            MessageId = 5,
                            GroupId = 2,
                            MessageText = "I've just started a wellness diet.",
                            SentAt = new DateTime(2023, 8, 15, 20, 59, 14, 584, DateTimeKind.Local).AddTicks(2417),
                            UserId = 2
                        },
                        new
                        {
                            MessageId = 6,
                            GroupId = 3,
                            MessageText = "Hey Hey all! It's my new lego megatower!",
                            SentAt = new DateTime(2023, 8, 15, 20, 59, 14, 584, DateTimeKind.Local).AddTicks(2419),
                            UserId = 3
                        },
                        new
                        {
                            MessageId = 7,
                            GroupId = 4,
                            MessageText = "What do I ask so I don't look dumb?",
                            SentAt = new DateTime(2023, 8, 15, 20, 59, 14, 584, DateTimeKind.Local).AddTicks(2422),
                            UserId = 4
                        },
                        new
                        {
                            MessageId = 8,
                            GroupId = 4,
                            MessageText = "Questions like What do I ask, How would I...if I were to..., To what extent does... Before asking, identify the kind of answer you're looking for, what are you assuming, is it right, and google it. Then ask.",
                            SentAt = new DateTime(2023, 8, 15, 20, 59, 14, 584, DateTimeKind.Local).AddTicks(2424),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MessageBoardApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Name = "Adam Zapel",
                            NormalizedUserName = "bob",
                            UserName = "Bob"
                        },
                        new
                        {
                            UserId = 2,
                            Name = "Anna Conda",
                            NormalizedUserName = "long",
                            UserName = "Long"
                        },
                        new
                        {
                            UserId = 3,
                            Name = "Crystal Ball",
                            NormalizedUserName = "crall",
                            UserName = "Crall"
                        },
                        new
                        {
                            UserId = 4,
                            Name = "Dee Zaster",
                            NormalizedUserName = "deedeeha",
                            UserName = "DeeDeeHa"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
